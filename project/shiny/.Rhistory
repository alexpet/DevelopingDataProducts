melt(md)
str(md)
subset(dm, select = c(chartDate,))
subset(md, select = c(chartDate,))
subset(md, select = c(chartDate))
names(md)
subset(md, select = c(chartDate,avgTemp,avgUsage))
melt(subset(md, select = c(chartDate,avgTemp,avgUsage)))
?melt
melt(subset(md, select = c(chartDate,avgTemp,avgUsage)), id.vars = "chartDate", measure.vars = c("avgTemp","avgUsage"))
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
melt(subset(md, select = c(chartDate,avgTemp,avgUsage)),
id.vars = "chartDate",
measure.vars = c("avgTemp","avgUsage")
)
str(melt(subset(md, select = c(chartDate,avgTemp,avgUsage)),
id.vars = "chartDate",
measure.vars = c("avgTemp","avgUsage")
))
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
md
md$chartDate <- as.Date(md$chartDate, format = "%Y-%m-%d")
md
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
?predict
predict(bestfit, interval = "prediction")
pred <- predict(bestfit, interval = "prediction")
pred
library(ggplot2)
md <- cbind(md,pred)
md
summary(bestfit)
md
head(md)
?summary
str(summary(bestfit))
str(summary(bestfit))$terms
summary(bestfit)$terms
class(summary(bestfit)$terms)
summary(bestfit)$terms$formala
summary(bestfit)$terms$formula
summary(bestfit)$formula
bestfit
str(bestfit)
bestfit$call
class(bestfit$call)
as.character(bestfit$call)
as.character(bestfit$call)[2]
?grepl
grepl("log",as.character(bestfit$call)[2])
isLogModel <- function(md) {
grepl("log",as.character(md$call)[2])
}
isLogModel(bestfit)
buildPredictionModel <- function(md, bestFit) {
p <- predict(bestfit, interval = "prediction")
pm <- cbind(md, p)
return(pm)
}
pm <- buildPredictionModel(md, bestfit)
head(pm)
pm <- subset(pm, select = c(chartDate, logAvgUsage, fit, lwr, upr))
pm
library(ggplot2)
qplot(pm)
require(plotrix)
install.packages('plotrix')
library(plotrix)
names(pm)
with(pm,plotCI(chartDate,fit, lwr, upr))
par(mfrow=c(1,1))
with(pm,plotCI(chartDate,fit, lwr, upr))
pm
library(ggplot2)
names(pm)
ggplot(pm, aes(x=chartDate,y=fit)) +
geom_point(size=4) +
geom_errorbar(aes(ymax = upr, ymin = lwr))
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_point(size=4) + geom_errorbar(aes(ymax = upr, ymin = lwr))
g
g
g <- g + geom_point(data=pm[logAvgUsage,], aes(x=charDate,y=fit))
g <- g + geom_point(data=pm[,logAvgUsage], aes(x=charDate,y=fit))
names(pm)
g <- g + geom_point(data=pm[,2], aes(x=charDate,y=fit))
g <-  ggplot(pm, aes(x=chartDate,y=fit+logAvgUsage)) + geom_point(size=4) + geom_errorbar(aes(ymax = upr, ymin = lwr))
g
g <-  ggplot(pm, aes(x=chartDate,y=c(fit,logAvgUsage))) + geom_point(size=4) + geom_errorbar(aes(ymax = upr, ymin = lwr))
g
g <- g + geom_point(data=pm[,logAvgUsage], aes(x=charDate,y=fit))
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_point(size=4) + geom_errorbar(aes(ymax = upr, ymin = lwr))
g
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_line(size=1) + geom_errorbar(aes(ymax = upr, ymin = lwr))
g
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_line(size=1) + geom_errorbar(aes(ymax = upr, ymin = lwr)) + geom_point(x=chartDate, y=logAvgUsage)
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_line(size=1) + geom_errorbar(aes(ymax = upr, ymin = lwr)) + geom_point(pm, aes(x=chartDate, y=logAvgUsage))
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_line(size=1) + geom_errorbar(aes(ymax = upr, ymin = lwr)) + geom_point(data = pm$logAvgUsage, color = "red")
str(pm)
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_line(size=1) + geom_errorbar(aes(ymax = upr, ymin = lwr)) + geom_line(data = pm$logAvgUsage, color = "red")
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_point() + geom_errorbar(aes(ymax = upr, ymin = lwr)) + geom_point(aes(x = pm$chartDate, y = pm$logAvgUsage), color = "red")
g
pm
head(pm)
pm$logAvgUsage <- exp(pm$logAvgUsage)
pm$fit <- exp(pm$fit)
pm$lwr <- exp(pm$lwr)
pm$upr <- exp(pm$upr)
names(pm) <- c("chartDate", "avgUsage", "fit", "lwr", "upr")
pm
g <- g + scale_colour_manual("",
breaks = c("Prediction", "Actual"),
values = c("black", "red"))
g
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_point() + geom_errorbar(aes(ymax = upr, ymin = lwr)) + geom_point(aes(x = pm$chartDate, y = pm$logAvgUsage), color = "red") + scale_colour_manual("", breaks = c("Prediction", "Actual"), values = c("black", "red"))
g
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_point() + geom_errorbar(aes(ymax = upr, ymin = lwr)) + geom_point(aes(x = pm$chartDate, y = pm$logAvgUsage), color = "red")
g
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_point() + geom_errorbar(aes(ymax = upr, ymin = lwr)) + geom_point(aes(x = pm$chartDate, y = pm$logAvgUsage), color = "red")
g
g <-  ggplot(pm, aes(x=chartDate,y=fit)) + geom_point() + geom_errorbar(aes(ymax = upr, ymin = lwr)) + geom_point(aes(x = pm$chartDate, y = pm$avgUsage), color = "red")
g
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit)) +
geom_point() +
geom_errorbar(aes(ymax = upr, ymin = lwr)) +
geom_point(aes(x = pm$chartDate, y = pm$AvgUsage), color = "red") +
scale_colour_manual("", breaks = c("Prediction", "Actual"), values = c("black", "red"))
}
plotPredictionModel(pm)
plotPredictionModel(pm)
plotPredictionModel(pm)
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit)) +
geom_point() +
geom_errorbar(aes(ymax = upr, ymin = lwr)) +
geom_point(aes(x = pm$chartDate, y = pm$AvgUsage), color = "red") +
scale_colour_manual("", breaks = c("Prediction", "Actual"), values = c("black", "red"))
g
}
plotPredictionModel(pm)
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit)) +
geom_point() +
geom_errorbar(aes(ymax = upr, ymin = lwr)) +
geom_point(aes(x = pm$chartDate, y = pm$avgUsage), color = "red") +
scale_colour_manual("", breaks = c("Prediction", "Actual"), values = c("black", "red"))
g
}
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit)) +
geom_point() +
geom_errorbar(aes(ymax = upr, ymin = lwr)) +
geom_point(aes(x = pm$chartDate, y = pm$avgUsage), color = "red") +
scale_colour_manual("", breaks = c("Prediction", "Actual"), values = c("black", "red"))
g
}
plotPredictionModel(pm)
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit, color = "black")) +
geom_point() +
geom_errorbar(aes(ymax = upr, ymin = lwr)) +
geom_point(aes(x = pm$chartDate, y = pm$avgUsage), color = "red") +
scale_colour_manual("", breaks = c("Prediction", "Actual"), values = c("black", "red")) +
labs(title = "Prediction Model")
g
}
plotPredictionModel(pm)
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit, color = "black")) +
geom_point() +
geom_errorbar(aes(ymax = upr, ymin = lwr, color = "grey")) +
geom_point(aes(x = pm$chartDate, y = pm$avgUsage), color = "red") +
scale_colour_manual("", breaks = c("Prediction", "Actual","CI"),
values = c("black", "red", "grey")) +
labs(title = "Prediction Model")
g
}
plotPredictionModel(pm)
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit, color = "black")) +
geom_point() +
geom_point(aes(x = pm$chartDate, y = pm$avgUsage), color = "red") +
geom_errorbar(aes(ymax = upr, ymin = lwr, color = "grey")) +
scale_colour_manual("", breaks = c("Prediction", "Actual","CI"),
values = c("black", "red", "grey")) +
labs(title = "Prediction Model")
g
}
plotPredictionModel(pm)
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit, color = "black")) +
geom_point() +
geom_point(aes(x = pm$chartDate, y = pm$avgUsage), color = "red") +
geom_errorbar(aes(ymax = upr, ymin = lwr, color = "blue")) +
scale_colour_manual("", breaks = c("Prediction", "Actual","CI"),
values = c("black", "red", "blue")) +
labs(title = "Prediction Model")
g
}
plotPredictionModel(pm)
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit, color = "black")) +
geom_point() +
geom_point(aes(x = pm$chartDate, y = pm$avgUsage), color = "blue") +
geom_errorbar(aes(ymax = upr, ymin = lwr)) +
scale_colour_manual("", breaks = c("Prediction", "Actual","CI"),
values = c("blue", "red", "black")) +
labs(title = "Prediction Model")
g
}
plotPredictionModel(pm)
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit, color = "black")) +
geom_point() +
geom_point(aes(x = pm$chartDate, y = pm$avgUsage), color = "black") +
geom_errorbar(aes(ymax = upr, ymin = lwr)) +
scale_colour_manual("", breaks = c("Prediction", "Actual"),
values = c("black", "red")) +
labs(title = "Prediction Model")
g
}
plotPredictionModel(pm)
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit, color = "black")) +
geom_point() +
geom_point(aes(x = pm$chartDate, y = pm$avgUsage), color = "red") +
geom_errorbar(aes(ymax = upr, ymin = lwr, color = "blue")) +
scale_colour_manual("", breaks = c("Prediction", "Actual", "CI"),
values = c("black", "red", "blue")) +
labs(title = "Prediction Model")
g
}
plotPredictionModel(pm)
plotPredictionModel <- function(pm) {
g <-  ggplot(pm, aes(x=chartDate,y=fit)) +
geom_point() +
geom_point(aes(x = pm$chartDate, y = pm$avgUsage), color = "red") +
geom_errorbar(aes(ymax = upr, ymin = lwr)) +
scale_colour_manual("", breaks = c("Prediction", "Actual"),
values = c("black", "red")) +
labs(title = "Prediction Model")
g
}
plotPredictionModel(pm)
shiny::runApp('EnergyForecaster')
md <- prepareModelData(u, dw)
head(md)
pm <- buildPredictionModel(md, bestfit)
buildPredictionModel <- function(md, bestFit) {
p <- predict(bestFit, interval = "prediction")
pm <- cbind(md, p)
if(isLogModel) {
pm <- subset(pm, select = c(chartDate, avgUsage, fit, lwr, upr))
pm$fit <- exp(pm$fit)
pm$lwr <- exp(pm$lwr)
pm$upr <- exp(pm$upr)
} else {
pm <- subset(pm, select = c(chartDate, avgUsage, fit, lwr, upr))
}
return(pm)
}
pm <- buildPredictionModel(md, bestfit)
pm
plotPredictionModel(p)
plotPredictionModel(pm)
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
cat(dim(p)[1])
shiny::runApp('EnergyForecaster')
dim(p)
p <- predict(bestfit, interval = "prediction")
dim(p)
head(pm)
pm
p
rm(list=ls())
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
rm(ls=ls())
rm(list=ls())
s2 <- 105.99^2
n <- 513
alpha <- .05
qtiles <- qchisq(c(alpha/2, 1-alpha/2),n-1)
qtiles
ival <- rev((n-1)*s2/qtiles)
?rev
sqrt(ival)
sigmaVals <- seq(90, 120, length=100)
likeVals <- dgamma((n-1)*s2, shape=(n-1)/2, scale=2*sigmaVals^2)
likeVals <- likeVals / max(likeVals)
plot(sigmaVals, likeVals, type = "l")
lines(range(sigmaVals[likeVals >= 1/8]),c(1/8,1/8))
lines(range(sigmaVals[likeVals >= 1/16]),c(1/16,1/16))
data(sleep)
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g2 - g1
mn <- mean(difference)
mn
s <- sd(difference)
s
n <- 10
mn + c(-1, 1) * qt(.975, n-2) * s / sqrt(n)
t.test(difference)$conf.int
tStat <- sqrt(n) * mn / s
esVals <- seq(0, 1, length = 100)
likeVals <- dt(tStat, n - 1, ncp = sqrt(n) * esVals)
likeVals <- likeVals / max(likeVals)
plot(esVals, likeVals, type = "l")
plot(esVals, likeVals, type = "l")
esVals <- seq(0, 3, length = 100)
plot(esVals, likeVals, type = "l")
likeVals <- dt(tStat, n - 1, ncp = sqrt(n) * esVals)
likeVals <- likeVals / max(likeVals)
plot(esVals, likeVals, type = "l")
lines(range(esVals[likeVal>1/8]), c(1/8,1/8))
lines(range(esVals[likeVals>1/8]), c(1/8,1/8))
lines(range(esVals[likeVals>1/16]), c(1/16,1/16))
muVals <- seq(0, 8, length = 1000)
likeVals <- sapply(muVals, function(mu) {})
likeVals <- sapply(muVals, function(mu) { (sum((difference-mu)^2) / sum((difference-mn))^(-n/2)) })
plot(muVals, likeVals, type="l")
muVals <- seq(0, 3, length = 1000)
likeVals <- sapply(muVals, function(mu) { (sum((difference-mu)^2) / sum((difference-mn))^(-n/2)) })
plot(muVals, likeVals, type="l")
mu
mn
muVals <- seq(0, 4, length = 1000)
likeVals <- sapply(muVals, function(mu) { (sum((difference-mu)^2) / sum((difference-mn))^(-n/2)) })
likeVals <- likeVals / max(likeVals)
plot(muVals, likeVals, type="l")
likeVals <- sapply(muVals, function(mu) { (sum((difference-mu)^2) / sum((difference-mn)^2))^(-n/2) })
plot(muVals, likeVals, type="l")
muVals <- seq(0, 4\3, length = 1000)
muVals <- seq(0, 3, length = 1000)
likeVals <- sapply(muVals, function(mu) { (sum((difference-mu)^2) / sum((difference-mn)^2))^(-n/2) })
plot(muVals, likeVals, type="l")
lines(range(muVals[likeVals>1/8]), c(1/8,1/8))
lines(range(muVals[likeVals>1/16]), c(1/16,1/16))
data(islands)
islands
hist(islands)
?hist
hist(log10(islands))
stem(log10(islands))
data("InsectSprays")
attach(InsectSprays)
plot(c(.5, 6.5), range(count))
sprayTypes <- unique(spray)
for (i in 1 : length(sprayTypes)){
y <- count[spray == sprayTypes[i]]
n <- sum(spray == sprayTypes[i])
points(jitter(rep(i, n), amount = .1), y)
lines(i + c(.12, .28), rep(mean(y), 2), lwd = 3)
lines(rep(i + .2, 2),
mean(y) + c(-1.96, 1.96) * sd(y) / sqrt(n)
)
}
data("faithful")
d <- density(faithful$eruptions, bw = "sj")
plot(d)
?density
library(MASS)
library(caith)
install.packages("caith")
data(caith)
caith
mosaicplot(caith, color = topo.colors(4), main = "Mosaic plot")
B <- 10000
gmBol
gmVol
rm(list=ls())
sp <- (7*3^2+7*5^2)/(8+8-2)
sp
t <- qt(.975, 14)
6 - 4 + c(-1,1) * t * sp * sqrt(1/7 + 1/7)
exp(6 - 4 + c(-1,1) * t * sp * sqrt(1/7 + 1/7))
6 - 4 + c(-1,1) * t * sp * sqrt(1/7 + 1/7)
sp <- (7*3+7*5)/(8+8-2)
sp
6 - 4 + c(-1,1) * t * sp * sqrt(1/7 + 1/7)
sp <- log((7*3+7*5)/(8+8-2))
sp
6 - 4 + c(-1,1) * t * sp * sqrt(1/7 + 1/7)
sp <- (7*log(3)+7*log(5)/(8+8-2)
sp <- (7*log(3)+7*log(5))/(8+8-2)
sp
6 - 4 + c(-1,1) * t * sp * sqrt(1/7 + 1/7)
log(0)
log(1)
1-exp(-1)
1-exp(0)
exp(1)
1/exp(1)
sp <- (7*3+7*5)/(8+8-2)
sp
sp <- sqrt((7*3+7*5)/(8+8-2))
sp
t
6 - 4 + c(-1,1) * t * sp * sqrt(1/8 + 1/8)
rm(list=ls())
s2 <- 30^1
s2 <- 30^2
n <- 9
alpha <- 0.05
qtiles <- qchisq(c(alpha/2, 1-alpha/2), n-1)
rm(qtiles)
t <- qt(.975)
t <- qt(.975, df = 8)
mean <- 1100
sd <- 30
rm(s2)
rm(alpha)
q1 <- mean + c(-1,1) * t * sd / sqrt(n)
q1
rm(sd)
mn <- -2
rm(mn)
meanDif <- -2
s <- 3
meanDif + c(-1,1) * t * s / sqrt(n)
s <- 2
meanDif + c(-1,1) * t * s / sqrt(n)
s <- 2.2
meanDif + c(-1,1) * t * s / sqrt(n)
s <- 2.4
meanDif + c(-1,1) * t * s / sqrt(n)
s <- 2.5
meanDif + c(-1,1) * t * s / sqrt(n)
s <- 2.7
meanDif + c(-1,1) * t * s / sqrt(n)
s <- 2.6
meanDif + c(-1,1) * t * s / sqrt(n)
rm(meanDif)
rm(mean)
n <- 10
rm(q1)
rm(t)
s <- sqrt(((n-1)*.6^2+(n-1)*.68^2)/(2n-2))
s <- sqrt(((n-1)*.6^2+(n-1)*.68^2)/(2*n-2))
s
3 - 5 + c(-1,1) * qt(.975,n-1) * s * sqrt(1/n+1/n)
3 - 5 + c(-1,1) * qt(.975,2n-1) * s * sqrt(1/n+1/n)
3 - 5 + c(-1,1) * qt(.975,2*n-1) * s * sqrt(1/n+1/n)
s <- .64
3 - 5 + c(-1,1) * qt(.975,2*n-1) * s * sqrt(1/n+1/n)
3 - 5 + c(-1,1) * qt(.975,n-1) * s * sqrt(1/n+1/n)
3 - 5 + c(-1,1) * qt(.975,2*n-1) * s * sqrt(1/n+1/n)
3 - 5 + c(-1,1) * qt(.975,19) * s * sqrt(1/n+1/n)
3 - 5 + c(-1,1) * qt(.975,18) * s * sqrt(1/n+1/n)
3 - 5 + c(-1,1) * qt(.975,18) * s * sqrt(1/(2*n))
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
library(binom)
install.packages("binom")
library(binom)
binom.bayes(13, 20, type = "higest")
binom.bayes(13, 20, type = "highest")
