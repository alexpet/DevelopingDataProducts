library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
dim(olive)
model2 = train(Area ~ .,data=olive,method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(model2,newdata)
summary(olive)
str(olive)
unique(olive$Area)
?olive
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
set.seed(13234)
?SAheart
set.seed(13234)
model4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model4, trainSA))
missClass(testSA$chd, predict(model4, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.train)
str(vowel.test)
set.seed(33833)
model5 <- train(y ~ ., data = vowel.train, method = "rf")
?varImp
varImp(model5)
rm(list=ls())
install.packages(rgl)
install.packages("rgl")
library("mvtnorm")
sigma <- matrix(c(8, .25 * 8, .25 * 8, 8), 2, 2)
xvals <- seq(-10, 10, length = 100)
yvals <- seq(-10, 10, length = 100)
zvals <- apply(expand.grid(xvals, yvals), 1, function(w) dvnorm(w, mean=c(0,0), sigma = sigma))
library(rgl)
library(mvtnorm)
zvals <- apply(expand.grid(xvals, yvals), 1, function(w) dvnorm(w, mean=c(0,0), sigma = sigma))
install.packages("mvtnorm")
install.packages("mvtnorm")
library(mvtnorm)
library(rgl)
zvals <- apply(expand.grid(xvals, yvals), 1, function(w) dvnorm(w, mean=c(0,0), sigma = sigma))
zvals <- apply(expand.grid(xvals, yvals), 1, function(w) dmvnorm(w, mean=c(0,0), sigma = sigma))
persp3d(x = xvals, y = yvals, z = zvals, col = "lightblue")
planes3d(0, 1, 0, -5, col = grey(.8))
rm(list=ls())
install.packages("fpp", dependencies=TRUE)
help.search("forecasting")
help(forecast)
example("forecast.ar")
apropos("forecast")
help(package="fpp")
ausgdp <- ts(scan("gdp.dat"),frequency=4, start=1971+2/4)
elecsales
library(fpp)
elecsales
ausgdp <- ts(scan("gdp.dat"),frequency=4, start=1971+2/4)
gdp
ausgdp
data(ausgdp)
class(ausgdp)
electsales
elecsales
rm(list=ls())
cuse <- read.table("http://data.princeton.edu/wws509/datasets/cuse.dat",header=TRUE)
cuse
attach(cuse)
lrfit <- glm( cbind(using, notUsing) ~
+  age + education + wantsMore , family = binomial)
lrfit
noMore <- wantsMore == "no"
hiEduc <- education == "high"
glm( cbind(using,notUsing) ~ age + hiEduc + noMore, family=binomial)
1-pchisq(29.92,10)
lrfit <- glm( cbind(using,notUsing) ~ age * noMore + hiEduc , family=binomial)
lrfit
1-pchisq(12.63,7)
summary(lrfit)
1-pchisq(165.77,15)
plot(lrfit)
lrfit0 <- update(lrfit, ~ . - age:noMore)
anova(lrfit0,lrfit)
summary(lrfit0)
summary(lrfit)
anova(lrfit)
anova(lrfit0,lrfit)
anova(lrfit0,lrfit,test="Chisq")
anova(lrfit,test="Chisq")
drop1(lrfit, test="Chisq")
add1(lrfit, ~.^2,test="Chisq")
search <- step(additive, ~.^2)
?step
search <- step(lrfit, ~.^2)
search$anova
rm(list=ls())
library(fpp)
plot(melsyd[,"Economy.Class"],
main="Economy class passengers: Melbourne-Sydney",
xlab="Year",ylab="Thousands")
class(melsyd)
head(melsyd)
names(melsyd)
summary(melsyd)
table(melsyd)
str(melsyd)
plot(a10, ylab="$ million", xlab="Year", main="Antidiabetic drug sales")
seasonplot(a10,ylab="$ million", xlab="Year",
main="Seasonal plot: antidiabetic drug sales",
year.labels=TRUE, year.labels.left=TRUE, col=1:20, pch=19)
monthplot(a10,ylab="$ million",xlab="Month",xaxt="n",
main="Seasonal deviation plot: antidiabetic drug sales")
axis(1,at=1:12,labels=month.abb,cex=0.8)
plot(jitter(fuel[,5]), jitter(fuel[,8]), xlab="City mpg", ylab="Carbon footprint")
pairs(fuel[,-c(1:2,4,7)], pch=19)
fuel2 <- fuel[fuel$Litres<2,]
summary(fuel2[,"Carbon"])
sd(fuel2[,"Carbon"])
beer2 <- window(ausbeer, start=1992, end=2006-.1)
lag.plot(beer2, lags=9, do.lines=FALSE)
Acf(beer2)
set.seed(30)
x <- ts(rnorm(50))
plot(x, main="White noise")
Acf(x)
?meanh
library(fpp)
?meanh
?meanf
nile.fcast <- meanf(Nile, h=10)
plot(nile.fcast)
?naive
plot(naive(gold,h=50),include=200)
plot(snaive(wineind))
plot(rwf(gold,h=50),include=200)
plot(rwf(gold,h=50),include=200,drift=TRUE)
?rwf
gold.fcast <- rwf(gold[1:60],h=50,drift=TRUE)
plot(gold.fcast)
beer2 <- window(ausbeer,start=1992,end=2006-.1)
beerfit1 <- meanf(beer2, h=11)
beerfit2 <- naive(beer2, h=11)
beerfit3 <- snaive(beer2, h=11)
plot(beerfit1, plot.conf=FALSE,
main="Forecasts for quarterly beer production")
lines(beerfit2$mean,col=2)
lines(beerfit3$mean,col=3)
legend("topright",lty=1,col=c(4,2,3),
legend=c("Mean method","Naive method","Seasonal naive method"))
dj2 <- window(dj,end=250)
plot(dj2,main="Dow Jones Index (daily ending 15 Jul 94)",
ylab="",xlab="Day",xlim=c(2,290))
lines(meanf(dj2,h=42)$mean,col=4)
lines(rwf(dj2,h=42)$mean,col=2)
lines(rwf(dj2,drift=TRUE,h=42)$mean,col=3)
legend("topleft",lty=1,col=c(4,2,3),
legend=c("Mean method","Naive method","Drift method"))
plot(log(elec), ylab="Transformed electricity demand",
xlab="Year", main="Transformed monthly electricity demand")
title(main="Log",line=-1)
lambda <- BoxCox.lambda(elec) # = 0.27
plot(BoxCox(elec,lambda))
lambda
monthdays <- rep(c(31,28,31,30,31,30,31,31,30,31,30,31),14)
monthdays[26 + (4*12)*(0:2)] <- 29
par(mfrow=c(2,1))
plot(milk, main="Monthly milk production per cow",
ylab="Pounds",xlab="Years")
plot(milk/monthdays, main="Average milk production per cow per day",
ylab="Pounds", xlab="Years")
beer2 <- window(ausbeer,start=1992,end=2006-.1)
beerfit1 <- meanf(beer2,h=11)
beerfit2 <- rwf(beer2,h=11)
beerfit3 <- snaive(beer2,h=11)
plot(beerfit1, plot.conf=FALSE,
main="Forecasts for quarterly beer production")
lines(beerfit2$mean,col=2)
lines(beerfit3$mean,col=3)
lines(ausbeer)
legend("topright", lty=1, col=c(4,2,3),
legend=c("Mean method","Naive method","Seasonal naive method"))
par(mfrow=c(1,1))
beer2 <- window(ausbeer,start=1992,end=2006-.1)
beerfit1 <- meanf(beer2,h=11)
beerfit2 <- rwf(beer2,h=11)
beerfit3 <- snaive(beer2,h=11)
plot(beerfit1, plot.conf=FALSE,
main="Forecasts for quarterly beer production")
lines(beerfit2$mean,col=2)
lines(beerfit3$mean,col=3)
lines(ausbeer)
legend("topright", lty=1, col=c(4,2,3),
legend=c("Mean method","Naive method","Seasonal naive method"))
?window
beer3 <- window(ausbeer, start=2006)
accuracy(beerfit1, beer3)
accuracy(beerfit2, beer3)
accuracy(beerfit3, beer3)
?accuracy
dj2 <- window(dj, end=250)
plot(dj2, main="Dow Jones Index (daily ending 15 Jul 94)",
ylab="", xlab="Day", xlim=c(2,290))
lines(meanf(dj2,h=42)$mean, col=4)
lines(rwf(dj2,h=42)$mean, col=2)
lines(rwf(dj2,drift=TRUE,h=42)$mean, col=3)
legend("topleft", lty=1, col=c(4,2,3),
legend=c("Mean method","Naive method","Drift method"))
lines(dj)
dj3 <- window(dj, start=251)
accuracy(meanf(dj2,h=42), dj3)
accuracy(rwf(dj2,h=42), dj3)
accuracy(rwf(dj2,drift=TRUE,h=42), dj3)
dj2 <- window(dj, end=250)
plot(dj2, main="Dow Jones Index (daily ending 15 Jul 94)",
ylab="", xlab="Day")
res <- residuals(naive(dj2))
plot(res, main="Residuals from naive method",
ylab="", xlab="Day")
Acf(res, main="ACF of residuals")
hist(res, nclass="FD", main="Histogram of residuals")
Acf(res, main="ACF of residuals")
plot(res, main="Residuals from naive method",
+      ylab="", xlab="Day")
plot(res, main="Residuals from naive method",
+      ylab="", xlab="Day")
dj2 <- window(dj, end=250)
plot(dj2, main="Dow Jones Index (daily ending 15 Jul 94)",
ylab="", xlab="Day")
res <- residuals(naive(dj2))
plot(res, main="Residuals from naive method",
ylab="", xlab="Day")
dj2 <- window(dj, end=250)
plot(dj2, main="Dow Jones Index (daily ending 15 Jul 94)",
ylab="", xlab="Day")
# lag=h and fitdf=K
> Box.test(res, lag=10, fitdf=0)
Box-Pierce test
X-squared = 10.6425, df = 10, p-value = 0.385
> Box.test(res,lag=10, fitdf=0, type="Lj")
Box-Ljung test
X-squared = 11.0729, df = 10, p-value = 0.3507
Box.test(res, lag=10, fitdf=0)
Box.test(res,lag=10, fitdf=0, type="Lj")
rm(list=ls())
library(fma)
data(dole)
str(dole)
plot(dole)
data(package="fma")
?BoxCox
lambda <- BoxCox.lambda(dole)
plot1a <- plot(BoxCox(dole,lambda))
plot1a
plot(dole)
plot(BoxCox(dole,lambda))
data(package="fma")
data(usdeaths)
str(usdeaths)
lambda <- BoxCox.lambda(usdeaths)
plot(BoxCox(usdeaths,lambda))
plot(usdeaths)
plot(BoxCox(usdeaths,lambda))
data(bricksq)
plot(bricksq)
lambda <- BoxCox.lambda(bricksq)
plot(BoxCox(bricksq,lambda))
plot(bricksq)
plot(BoxCox(bricksq,lambda))
plot(bricksq)
plot(BoxCox(bricksq,lambda))
data(dowjones)
plot(dowjones)
forecast <- rwf(dowjones, drift=TRUE)
plot(forecast)
downjones[1,]
dowjones[1,]
dowjones[1]
dowjones[-1]
length(dowjones)
l <- length(dowjones)
segment(1,dowjones[1],l,dowjones[l])
segments(1,dowjones[1],l,dowjones[l])
forecast2 <- naive(dowjones)
plot(forecast2)
forecast3 <- snaive(dowjones)
plot(forecast3)
plot(forecast3, 10)
forecast3 <- meanf(dowjones)
plot(forecast)
plot(forecast2)
plot(forecast3)
plot(forecast2)
plot(forecast)
plot(forecast2)
plot(forecast3)
rm(list=ls)
rm(list=ls())
data(ibmclose)
plot(ibmclose)
lambda <- BoxCox.lambda(ibmclose)
box.cox.ibmclose <- BoxCox(ibmclose,lambda)
plot(box.cox.ibmclose)
plot(ibmclose)
plot(box.cox.ibmclose)
seasonplot(ibmclose)
plot(ibmclose)
?seasonplot
seasonplot(ibmclose,year.lables=TRUE)
seasonplot(ibmclose,year.lables=TRUE,col=1:20)
seasonplot(ibmclose,col=rainbow(12),year.lables=TRUE)
seasonplot(ibmclose,col=rainbow(12),year.labels=TRUE)
str(ibmclose)
seasonplot(ibmclose,col=rainbow(12),year.labels=TRUE,s=12)
plot(ibmclose)
seasonplot(ibmclose,col=rainbow(30),year.labels=TRUE,s=30)
length(ibmclose)
training <- ibmclose[1:300]
testing <- ibmclose[301:369]
f.mean <- meanf(training,h=69)
f.mean
plot(f.mean)
f.naive <- rwf(ibmclose, h=69)
f.snaive <- snaive(ibmclose, h=69)
f.drift <- rwf(ibmclose, h=69, drift=TRUE)
accuracy(f.mean,testing)
accuracy(f.naive,testing)
accuracy(f.snaive,testing)
accuracy(f.drift,testing)
plot(f.naive)
plot(f.snaive)
rm(list=ls())
data(hsales)
plot(hsales)
lambda <- BoxCox.lambda(hsales)
plot(BoxCox(hsales,lambda))
plot(hsales)
plot(BoxCox(hsales,lambda))
seasonplot(hsales, yearl.labels=TRUE,col=rainbow(23))
seasonplot(BoxCox(hsales,lambda), yearl.labels=TRUE,col=rainbow(23))
?window
training <- window(hsales, end = c(1993,11))
training <- window(hsales, start = c(1993,12))
training <- window(hsales, end = c(1993,11))
testing <- window(hsales, start = c(1993,12))
fit1 <- meanf(training, h=24)
fit2 <- naive(training, h=24)
fit3 <- snaive(training, h=24)
fit4 <- fwf(training, h=24, dift=TRUE)
fit4 <- rwf(training, h=24, dift=TRUE)
fit4 <- rwf(training, h=24, drift=TRUE)
accuracy(fit1, testing)
accuracy(fit1, testing)
accuracy(fit2, testing)
accuracy(fit3, testing)
accuracy(fit4, testing)
plot(fit3)
plot(testing)
plot(accuracy(fit4, testing))
accuracy(fit4, testing)
accuracy(fit3, testing)
?forecast
forecast(ausbeer)
plot(forecast(ausbeer))
rm(list=ls())
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
M
print(M,"chart")
str(M)
M$chartid
M$chartid$MotionChartID1d74a637868
str(M)
M$html$chart
print(M, 'chart', file='myfilename.html')
demo(googleVis)
rm(list=ls())
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
require(rCharts)
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
rm(list=ls())
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
?dateRangeInput
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
?fileInput
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
shiny::runApp('DevelopingDataProducts/project/shiny/EnergyForecaster')
readUsageHistory <- function(uFilePath, uHeader, uSep, uQuote) {
usageHistory <- read.csv(file = uFilePath,
header = uHeader,
sep = uSep,
quote = uQuote)
names(usageHistory) <- c("start", "end", "usage")
usageHistory$start <- dmy(usageHistory$start)
usageHistory$end <- dmy(usageHistory$end)
}
uData <- readUsageHistory("Usages.csv", uHeader = FALSE, uSep = ",", uQuote = "")
getwd()
setwd("C:/Users/Ekellan/git/DevelopingDataProducts/project/shiny")
uData <- readUsageHistory("Usages.csv", uHeader = FALSE, uSep = ",", uQuote = "")
class(uData)
head(uData)
uData
readUsageHistory <- function(uFilePath, uHeader, uSep, uQuote) {
usageHistory <- read.csv(file = uFilePath,
header = uHeader,
sep = uSep,
quote = uQuote)
names(usageHistory) <- c("start", "end", "usage")
#         usageHistory$start <- dmy(usageHistory$start)
#         usageHistory$end <- dmy(usageHistory$end)
}
uData <- readUsageHistory("Usages.csv", uHeader = FALSE, uSep = ",", uQuote = "")
head(uData)
uData
read.csv(file = "Usages.csv",
header = F,
sep = ",",
quote = "")
readUsageHistory <- function(uFilePath, uHeader, uSep, uQuote) {
usageHistory <- read.csv(file = uFilePath,
header = uHeader,
sep = uSep,
quote = uQuote)
names(usageHistory) <- c("start", "end", "usage")
#         usageHistory$start <- dmy(usageHistory$start)
#         usageHistory$end <- dmy(usageHistory$end)
return(usageHistory)
}
quote = "")
readUsageHistory <- function(uFilePath, uHeader, uSep, uQuote) {
usageHistory <- read.csv(file = uFilePath,
header = uHeader,
sep = uSep,
quote = uQuote)
names(usageHistory) <- c("start", "end", "usage")
#         usageHistory$start <- dmy(usageHistory$start)
#         usageHistory$end <- dmy(usageHistory$end)
return(usageHistory)
}
uData <- readUsageHistory("Usages.csv", uHeader = FALSE, uSep = ",", uQuote = "")
head(uData)
readUsageHistory <- function(uFilePath, uHeader, uSep, uQuote) {
usageHistory <- read.csv(file = uFilePath,
header = uHeader,
sep = uSep,
quote = uQuote)
names(usageHistory) <- c("start", "end", "usage")
usageHistory$start <- dmy(usageHistory$start)
usageHistory$end <- dmy(usageHistory$end)
return(usageHistory)
}
uData <- readUsageHistory("Usages.csv", uHeader = FALSE, uSep = ",", uQuote = "")
head(uData)
class(uData)
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
shiny::runApp('EnergyForecaster')
library(rCharts)
?nplot
?nPlot
require(rCharts)
?nPlot
shiny::runApp('EnergyForecaster')
source('C:/Users/Ekellan/git/DevelopingDataProducts/project/shiny/EnergyForecaster/helpers.R')
